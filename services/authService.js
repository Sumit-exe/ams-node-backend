import jwt from 'jsonwebtoken';
import bcrypt from 'bcrypt';
import Employee from '../models/employeeModel.js';
import { customAlphabet } from 'nanoid';

const JWT_SECRET = process.env.JWT_SECRET || 'my-secret';

const authService = {
    registerEmployee: async (employeeData) => {
        try {
            const { employeeFullName, employeeEmail, employeePhoneNo, employeeAadhar, employeePassword } = employeeData;

            // Check if the employee already exists
            const existingEmployee = await Employee.findOne({ $or: [{ employeeAadhar }, { employeePhoneNo }, { employeeEmail }] });
            if (existingEmployee) {
                throw new Error('Employee already exists');
            }

            // Generate a salt and hash the password
            const hashedPassword = await bcrypt.hash(employeePassword, 10);

            // Generate a unique employee ID
            const nanoid = customAlphabet('1234567890ABCDEFGHIJKLMNOPRQSTUVWXYZ', 10);
            const autoGeneratedEmployeeId = nanoid(5);
            const employeeId = "E00" + autoGeneratedEmployeeId;

            // Create a new employee
            const newEmployee = await Employee.create({
                employeeFullName,
                employeeId,
                employeeEmail,
                employeePhoneNo,
                employeeAadhar,
                employeePassword: hashedPassword,
                employeeAvatar: "",
                employeeRole: "employee"
            });

            return newEmployee;
        } catch (error) {
            throw new Error(error.message);
        }
    },

    loginEmployee: async (employeeEmail, employeePassword) => {
        const employee = await Employee.findOne({ employeeEmail });
        if (!employee) {
            throw new Error('Employee not found');
        }
        const isMatch = await bcrypt.compare(employeePassword, employee.employeePassword);
        if (!isMatch) {
            throw new Error('Invalid credentials');
        }
        const token = jwt.sign({ employeeEmail: employee.employeeEmail }, JWT_SECRET, { expiresIn: '24h' });
        return { employee, token };
    },
    getAllEmps: async () => {
        const employees = await Employee.find({ });
        if (!employees) {
            throw new Error('No Employees found');
        }
        return employees ;
    }
};

export default authService;
